Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```

Doesn't compile because the address of s is referenced by ref1. So there is immutable reference to s.

Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```

Compiles. Because `String` refers to the data in the heap and it returns the address.
Lifetime? The new concept.
Not correct. Let's watch the Thursday lecture.

Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```

Compiles. Not correct. Let's watch Thursday lecture.